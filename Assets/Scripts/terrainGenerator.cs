using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class terrainGenerator : MonoBehaviour
{

    //The map that shows the terrain value at each existing coordinate
    private Dictionary<string, float> terrainMap;

	/// Size of a section side generated for the map
	private int chunkSize = 100;
	/*
    //The y size of a generated section of the map
    public int chunkSizeY;
    //The x size of a generated section of the map
    public int chunkSizeX;
	*/

    //A divisor that determines the amount of water generated by the perlin noise function
    public float waterAmount;

    //A divisor that determines amount of specific terrain based on temperature
    public float terrainAmount;

	private float [] thresholds = new float[(int)terrain.GRASS];

    public GameObject Water;

    public GameObject Grass;

    public GameObject Dirt;

    public GameObject Stone;

    public GameObject Snow;

    public GameObject Sand;

    public GameObject Desert;

    //Affects the types of terrain that are generated
    public float terrainSeed;

    public float waterSeed;

    // Enumerate terrain
	private enum terrain {
		WATER,
		DIRT,
		SNOW,
		STONE,
		GRASS,
        SAND,
        DESERT
	}

	private float getThreshold(terrain t){
		switch (t) {
		case terrain.WATER:
			return 0.2f;
        case terrain.SAND:
            return 0.25f;
		case terrain.DIRT:
			return 0.80f;
		case terrain.STONE:
			return 0.90f;
		case terrain.SNOW:
			return 1.0f;
		case terrain.GRASS:
			return 0.65f;
        case terrain.DESERT:
            return 0.30f;
		default:
			return 0.1f;
		}
	}


	float posNoise(int val){
		return (float)val / 10f;
	}
    // Use this for initialization
    void Start()
	{

        terrainMap = new Dictionary<string, float>();
        //System.Random randomNum = new System.Random();
        for (int y = 0; y < chunkSize; y++)
        {
            for (int x = 0; x < chunkSize; x++)
            {
				float xNoiseValue = posNoise(x);
				float yNoiseValue = posNoise(y);
                terrainMap.Add(x +" " + y, Mathf.PerlinNoise(xNoiseValue, yNoiseValue)/waterAmount);
                //print(Mathf.PerlinNoise(xNoiseValue, yNoiseValue));
				//float temp = terrainMap[x +" "+y];

				float waterVal = Mathf.PerlinNoise (posNoise (x) + waterSeed, posNoise (y) + waterSeed) / waterAmount;

                float terrainVal = Mathf.PerlinNoise(posNoise(x) + terrainSeed, posNoise(y) + terrainSeed)/terrainAmount;

				if (waterVal < getThreshold(terrain.WATER))
				{
					Instantiate(Water, new Vector3(x, y, 0), Quaternion.identity);
				}else if (waterVal < getThreshold(terrain.SAND))
                {
                    Instantiate(Sand, new Vector3(x, y, 0), Quaternion.identity);
                }
                
				else
				{
                    if (terrainVal <= getThreshold(terrain.DESERT))
                    {
                        Instantiate(Desert, new Vector3(x, y, 0), Quaternion.identity);
                    }
                    else if (getThreshold(terrain.DESERT) < terrainVal && terrainVal <= getThreshold(terrain.GRASS))
                    {
                        Instantiate(Grass, new Vector3(x, y, 0), Quaternion.identity);
                    }
                    else if (getThreshold(terrain.GRASS) < terrainVal && terrainVal <= getThreshold(terrain.DIRT))
                    {
                        Instantiate(Dirt, new Vector3(x, y, 0), Quaternion.identity);
                    }
                    else if (getThreshold(terrain.DIRT) < terrainVal && terrainVal <= getThreshold(terrain.STONE))
                    {
                        Instantiate(Stone, new Vector3(x, y, 0), Quaternion.identity);
                    }
                    else 
                    {
                        Instantiate(Snow, new Vector3(x, y, 0), Quaternion.identity);
                    }
                    
				}
            }
        }



		/*
        for (int y = 0; y < chunkSize; y++)
        {
            for (int x = 0; x < chunkSize; x++)
            {
                
                float temp = terrainMap[x +" "+y];
                if (temp < 0.3)
                {
                    Instantiate(Water, new Vector3(x, y, 0), Quaternion.identity);
                }
                else
                {
                    Instantiate(Grass, new Vector3(x, y, 0), Quaternion.identity);
                }

            }
        }*/
    }

    // Update is called once per frame
    void Update()
    {

    }
}
